# This workflow will build and push a signed Docker image

name: Build and sign image

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
    contents: write
    packages: write
    id-token: write
    security-events: write

jobs:
  find_origin_branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.find_origin_branch.outputs.branch }}
      tag_sha: ${{ steps.get_tag_sha.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
        with:
          fetch-depth: 0

      - name: Get the tag's SHA
        id: get_tag_sha
        run: |
          echo "**************** Looking for SHA of tag: ${{ github.ref }}"
          echo "sha=$(git rev-parse ${{ github.ref }})" >> $GITHUB_OUTPUT

      - name: Find origin branch
        id: find_origin_branch
        run: |
          echo "**************** Looking for branch containing: ${{ steps.get_tag_sha.outputs.sha }}"
          echo "**************** 1, $(git branch -r --contains ${{ steps.get_tag_sha.outputs.sha }})"
          echo "**************** 2, $(git branch -r --contains ${{ steps.get_tag_sha.outputs.sha }} | grep -v HEAD)"
          echo "**************** 3, $(git branch -r --contains ${{ steps.get_tag_sha.outputs.sha }} | grep -v HEAD | sed -e 's/^[[:space:]]*origin\///')"
          echo "**************** 4, $(git branch -r --contains ${{ steps.get_tag_sha.outputs.sha }} | grep -v HEAD | sed -e 's/^[[:space:]]*origin\///' | grep -e '^main$')"
          echo "branch=$(git branch -r --contains ${{ steps.get_tag_sha.outputs.sha }} | grep -v HEAD | sed -e 's/^[[:space:]]*origin\///' | grep -e '^main$')" >> $GITHUB_OUTPUT

  display_branch_info:
    runs-on: ubuntu-latest
    needs: find_origin_branch
    steps:
      - name: Display branch info
        run: |
          echo "**************** Branch: ${{needs.find_origin_branch.outputs.branch}}"
          echo "**************** Tag SHA: ${{needs.find_origin_branch.outputs.tag_sha}}"

  build_and_sign_image:
    runs-on: ubuntu-latest
    needs: find_origin_branch
    if: needs.find_origin_branch.outputs.branch == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1

      - name: Install cosign
        uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 #v3.0.2
        with:
          cosign-release: 'v1.13.1'

      - name: Log into registry ${{ env.REGISTRY }} for ${{ github.actor }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker Image
        id: docker-build-and-push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{github.run_number}}

      - name: Sign the published Docker images
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker-build-and-push.outputs.digest }}"

      - uses: anchore/sbom-action@c7f031d9249a826a082ea14c79d3b686a51d485a # v0.100.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          output-file: ./nginx-config-service-${{env.GITHUB_REF_NAME}}.spdx.json
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      # NOTE: This runs statically against the latest tag in Docker Hub which was not produced by this workflow
      # This should be updated once this workflow is fully implemented
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca # 0.16.1
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ inputs.image }}.sarif'
          ignore-unfixed: 'true'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@e5f05b81d5b6ff8cfa111c80c22c5fd02a384118 # v2.2.11
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ inputs.image }}.sarif'
          sha: ${{ github.sha }}
          ref: ${{ github.ref }}

      - name: Generate Release
        uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5 # v1.13.0
        with:
          artifacts: |
            trivy-results-${{ inputs.image }}.sarif
            ./nginx-config-service-${{env.GITHUB_REF_NAME}}.spdx.json
          body: |
            # Release ${{env.GITHUB_REF_NAME}}
            ## Changelog
            ${{ steps.meta.outputs.changelog }}
          generateReleaseNotes: true
          makeLatest: false
          name: "${{env.GITHUB_REF_NAME}}"
